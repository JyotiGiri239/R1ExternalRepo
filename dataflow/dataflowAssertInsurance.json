{
	"name": "dataflowAssertInsurance",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NewIns",
						"type": "DatasetReference"
					},
					"name": "InsuranceMasterName"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "Provider"
				},
				{
					"dataset": {
						"referenceName": "PlatformMapping",
						"type": "DatasetReference"
					},
					"name": "PlatformMapping"
				},
				{
					"dataset": {
						"referenceName": "EhrPlatform",
						"type": "DatasetReference"
					},
					"name": "EhrPlatform"
				},
				{
					"dataset": {
						"referenceName": "location",
						"type": "DatasetReference"
					},
					"name": "location"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "ValidInsuranceMasterFile"
				}
			],
			"transformations": [
				{
					"name": "InvalidInsuranceMaster"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "assert1"
				},
				{
					"name": "window1"
				},
				{
					"name": "StoreIntoDb"
				}
			],
			"scriptLines": [
				"parameters{",
				"     InsFileName as string ($InsFileName)",
				"}",
				"source(output(",
				"          OperationType as string,",
				"          NPI as string,",
				"          PlatformName as string,",
				"          PlatformProviderId as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          ZipCode as string,",
				"          City as string,",
				"          State as string,",
				"          InsuranceName as string,",
				"          InsuranceDescription as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> InsuranceMasterName",
				"source(output(",
				"          ID as long,",
				"          SciClientID as string,",
				"          SciClientLocationId as string,",
				"          ProviderId as string,",
				"          ProviderType as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Prefix as string,",
				"          Suffix as string,",
				"          PrimaryPhone as string,",
				"          SecondaryPhone as string,",
				"          Fax as string,",
				"          Website as string,",
				"          Email as string,",
				"          DEA as string,",
				"          NPI as string,",
				"          ProviderPicture as binary,",
				"          MarketingPicture as binary,",
				"          Birthdate as timestamp,",
				"          IsPlatform as boolean,",
				"          LocationID as long,",
				"          Gender as string,",
				"          PersonalStatement as string,",
				"          BoardCertifications as string,",
				"          EducationAndTraining as string,",
				"          Affiliation as string,",
				"          PlatformLocationId as string,",
				"          UsesOnlineScheduling as boolean,",
				"          AcceptsNewPatients as boolean,",
				"          AcceptsVideoVisits as boolean,",
				"          ZipCode as string,",
				"          UserId as string,",
				"          CreatedOn as timestamp,",
				"          LastUpdatedOn as timestamp,",
				"          RowHash as integer,",
				"          IsDeleted as boolean,",
				"          UpdatedBy as string,",
				"          DefaultBookingInstructionForPatient as string,",
				"          Fellowship as string,",
				"          Internship as string,",
				"          PCPNumber as string,",
				"          ProviderBio as string,",
				"          Residency as string,",
				"          ProviderPictureFileName as string,",
				"          PictureLink as string,",
				"          VideoLink as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Provider",
				"source(output(",
				"          ID as long,",
				"          ProviderPlatformMappingID as string,",
				"          EhrPlatformID as string,",
				"          SciClientID as string,",
				"          SciClientLocationId as string,",
				"          ProviderId as long,",
				"          UserId as string,",
				"          CreatedOn as timestamp,",
				"          LastUpdatedOn as timestamp,",
				"          RowHash as integer,",
				"          IsDeleted as boolean,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> PlatformMapping",
				"source(output(",
				"          ID as string,",
				"          Name as string,",
				"          Description as string,",
				"          Active as boolean,",
				"          SupportsCachedScheduling as boolean,",
				"          CachedSchedulingChunks as integer,",
				"          ProvidesIncrementalUpdates as boolean,",
				"          UserId as string,",
				"          CreatedOn as timestamp,",
				"          LastUpdatedOn as timestamp,",
				"          RowHash as integer,",
				"          IsDeleted as boolean,",
				"          UpdatedBy as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EhrPlatform",
				"source(output(",
				"          ID as long,",
				"          PrimaryPhone as string,",
				"          SecondaryPhone as string,",
				"          Fax as string,",
				"          Email as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          AddressLine3 as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          LastUpdatedOn as timestamp,",
				"          SciClientID as string,",
				"          PlatformProviderId as string,",
				"          SciProviderId as long,",
				"          LocationMode as string,",
				"          EhrPlatformID as string,",
				"          PlatformLocationID as string,",
				"          Name as string,",
				"          UserId as string,",
				"          CreatedOn as timestamp,",
				"          RowHash as integer,",
				"          IsDeleted as boolean,",
				"          UpdatedBy as string,",
				"          ExternalId as long,",
				"          LocationType as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> location",
				"assert1 derive(ErrorMssage = at (assertErrorMessages(),'assert1'),",
				"          InvalidKeyLookup = at(assertErrorMessages(), 'KeyLook'),",
				"          InvalidZipCode = at(assertErrorMessages(), 'Check ZipCode'),",
				"          InvalidNPI = at(assertErrorMessages(), 'checkNPI'),",
				"          InvalidProviderID = at(assertErrorMessages(), 'CheckPlatformProviderId'),",
				"          InvalidPlatfromName = at(assertErrorMessages(), 'CheckPlatformName'),",
				"          InvalidFN = at(assertErrorMessages(), 'CheckFN'),",
				"          InvalidLN = at(assertErrorMessages(), 'CheckLN'),",
				"          NotExsistZipCode = at(assertErrorMessages(), 'ZipCode'),",
				"          InvalidCity = at(assertErrorMessages(), 'City'),",
				"          InvalidState = at(assertErrorMessages(), 'state'),",
				"          columnValue = 1) ~> InvalidInsuranceMaster",
				"InsuranceMasterName derive(InsuranceName = iifNull(InsuranceName, '', InsuranceName),",
				"          {Key Lookup} = iif(!isNull(NPI) || (!isNull(PlatformName) &&  !isNull(PlatformProviderId))|| (!isNull(FirstName) && !isNull(LastName) &&!isNull(City) && !isNull(State))||(!isNull(FirstName) && !isNull(LastName) &&!isNull(ZipCode)) ,true(), false()),",
				"          FileName = $InsFileName,",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"derivedColumn1, Provider, PlatformMapping, EhrPlatform, location assert(expectUnique(InsuranceName, false, 'assert1', null, \"Insurance Name Can not be Null\"),",
				"     expectTrue(iif(((!isNull(InsuranceMasterName@NPI)) || (!isNull(PlatformName) &&  !isNull(InsuranceMasterName@PlatformProviderId))|| (!isNull(InsuranceMasterName@FirstName) && !isNull(InsuranceMasterName@LastName) &&!isNull(InsuranceMasterName@City) && !isNull(InsuranceMasterName@State))||(!isNull(InsuranceMasterName@FirstName) && !isNull(InsuranceMasterName@LastName) &&!isNull(InsuranceMasterName@ZipCode))) ,true(), false()), false, 'KeyLook', null, \"One key Look up required\"),",
				"     expectTrue(iif(((isNull(InsuranceMasterName@ZipCode) && {Key Lookup}==true()) ||(!isNull(InsuranceMasterName@ZipCode) && regexMatch(InsuranceMasterName@ZipCode,'^[1-9][0-9]{4}$'))), true(), false()), false, 'Check ZipCode', null, \"Zip code is Not Valid\"),",
				"     expectExists(Provider@NPI == InsuranceMasterName@NPI, true, 'checkNPI', null, \"NPI does Not Exsist\"),",
				"     expectExists(ProviderPlatformMappingID == InsuranceMasterName@PlatformProviderId, true, 'CheckPlatformProviderId', null, \"ProviderId is not Exsist in providerPlatformMapping Table\"),",
				"     expectExists(EhrPlatform@Name == PlatformName, true, 'CheckPlatformName', null, \"PlatformName is not Exsist in EhrPlatformTable\"),",
				"     expectExists(Provider@FirstName == InsuranceMasterName@FirstName, true, 'CheckFN', null, \"First Name is Not exsist in Provider Table\"),",
				"     expectExists(Provider@LastName == InsuranceMasterName@LastName, true, 'CheckLN', null, \"Last Name is Not exsist in Provider Table\"),",
				"     expectExists(location@ZipCode == InsuranceMasterName@ZipCode, true, 'ZipCode', null, \"Zip code Not Exsist in Location Table\"),",
				"     expectExists(location@City == InsuranceMasterName@City, true, 'City', null, \"City is Not Exsist in Location Table\"),",
				"     expectExists(location@State == InsuranceMasterName@State, true, 'state', null, \"state is Not Exsist in Location Table\")) ~> assert1",
				"InvalidInsuranceMaster window(asc(columnValue, true),",
				"     RowHash = rowNumber()) ~> window1",
				"window1 derive(Errors = concatWS(',', ErrorMssage, InvalidKeyLookup,InvalidZipCode,InvalidNPI,InvalidProviderID,InvalidPlatfromName,InvalidFN,InvalidLN,NotExsistZipCode,InvalidCity,InvalidState),",
				"          Status = iif(isNull(ErrorMssage)&&isNull(InvalidKeyLookup)&&isNull(InvalidZipCode)&&isNull(InvalidNPI)&&isNull(InvalidProviderID)&&isNull(InvalidPlatfromName)&&isNull(InvalidFN)&&isNull(InvalidLN)&&isNull(NotExsistZipCode), 'success', 'Failed'),",
				"          IsDeleted = 0,",
				"          LastUpdatedOn = currentUTC(),",
				"          CreatedOn = currentUTC(),",
				"          UserId = 'system',",
				"          JobId = 1) ~> StoreIntoDb",
				"StoreIntoDb sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as long,",
				"          NPI as string,",
				"          ProviderId as string,",
				"          PlatformName as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          InsuranceName as string,",
				"          InsuranceDescription as string,",
				"          JobId as long,",
				"          Status as string,",
				"          Errors as string,",
				"          SciClientID as string,",
				"          SciClientLocationId as string,",
				"          UserId as string,",
				"          CreatedOn as timestamp,",
				"          LastUpdatedOn as timestamp,",
				"          RowHash as integer,",
				"          IsDeleted as boolean,",
				"          UpdatedBy as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     ignoreAssertFailedRows: false,",
				"     partitionBy('hash', 1)) ~> ValidInsuranceMasterFile"
			]
		}
	}
}