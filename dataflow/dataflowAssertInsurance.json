{
	"name": "dataflowAssertInsurance",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "NewIns",
						"type": "DatasetReference"
					},
					"name": "InsuranceMasterName"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "ValidInsuranceMasterFile"
				}
			],
			"transformations": [
				{
					"name": "InvalidInsuranceMaster"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "assert1"
				},
				{
					"name": "window1"
				},
				{
					"name": "StoreIntoDb"
				}
			],
			"scriptLines": [
				"parameters{",
				"     parameter1 as string (\"\"),",
				"     parameter2 as string (\"\"),",
				"     parameter3 as string (\"\")",
				"}",
				"source(output(",
				"          OperationType as string,",
				"          NPI as string,",
				"          PlatformName as string,",
				"          PlatformProviderId as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          ZipCode as string,",
				"          City as string,",
				"          State as string,",
				"          InsuranceName as string,",
				"          InsuranceDescription as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false) ~> InsuranceMasterName",
				"assert1 derive(ErrorMssage = at (assertErrorMessages(),'assert1'),",
				"          InvalidKeyLookup = at(assertErrorMessages(), 'KeyLook'),",
				"          InvalidZipCode = at(assertErrorMessages(), 'Check ZipCode'),",
				"          columnValue = 1) ~> InvalidInsuranceMaster",
				"InsuranceMasterName derive(InsuranceName = iifNull(InsuranceName, '', InsuranceName),",
				"          {Key Lookup} = iif(!isNull(NPI) || (!isNull(PlatformName) &&  !isNull(PlatformProviderId))|| (!isNull(FirstName) && !isNull(LastName) &&!isNull(City) && !isNull(State))||(!isNull(FirstName) && !isNull(LastName) &&!isNull(ZipCode)) ,true(), false()),",
				"     partitionBy('hash', 1)) ~> derivedColumn1",
				"derivedColumn1 assert(expectUnique(InsuranceName, false, 'assert1', null, \"Insurance Name Can not be Null\"),",
				"     expectTrue(iif(((!isNull(NPI)) || (!isNull(PlatformName) &&  !isNull(PlatformProviderId))|| (!isNull(FirstName) && !isNull(LastName) &&!isNull(City) && !isNull(State))||(!isNull(FirstName) && !isNull(LastName) &&!isNull(ZipCode))) ,true(), false()), false, 'KeyLook', null, \"One key Look up required\"),",
				"     expectTrue(iif(((isNull(ZipCode) && {Key Lookup}==true()) ||(!isNull(ZipCode) && regexMatch(ZipCode,'^[1-9][0-9]{4}$'))), true(), false()), false, 'Check ZipCode', null, \"Zip code is Not Valid\")) ~> assert1",
				"InvalidInsuranceMaster window(asc(columnValue, true),",
				"     RowHash = rowNumber()) ~> window1",
				"window1 derive(Errors = concatWS(',', ErrorMssage, InvalidKeyLookup,InvalidZipCode),",
				"          Status = iif(isNull(ErrorMssage)&&isNull(InvalidKeyLookup)&&isNull(InvalidZipCode),'success', 'Failed'),",
				"          IsDeleted = 0,",
				"          LastUpdatedOn = currentUTC(),",
				"          CreatedOn = currentUTC(),",
				"          UserId = 'system',",
				"          JobId = $parameter1,",
				"          SciClientID = $parameter2,",
				"          SciClientLocationId = $parameter3) ~> StoreIntoDb",
				"StoreIntoDb sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ID as long,",
				"          NPI as string,",
				"          ProviderId as string,",
				"          PlatformName as string,",
				"          FirstName as string,",
				"          LastName as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          InsuranceName as string,",
				"          InsuranceDescription as string,",
				"          JobId as long,",
				"          Status as string,",
				"          Errors as string,",
				"          SciClientID as string,",
				"          SciClientLocationId as string,",
				"          UserId as string,",
				"          CreatedOn as timestamp,",
				"          LastUpdatedOn as timestamp,",
				"          RowHash as integer,",
				"          IsDeleted as boolean,",
				"          UpdatedBy as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     ignoreAssertFailedRows: false,",
				"     partitionBy('hash', 1)) ~> ValidInsuranceMasterFile"
			]
		}
	}
}